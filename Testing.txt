Тестування

Управління якістю проєкту передбачає ряд заходів, зокрема QA 
(Quality Assurance - гарантія якості). Частиною QA є тестування
- модульне тестування
- тестування швидкодії (perfomance)
- т. розгортання
- т. сумісності
...

Модульне тестування (Unit testing)
передбачає вибіркові тести модулів - частин проєкту, що мають 
цілісне вираження (функції/процедури, класи/об'єкти, бібліотеки, modules, ...)
Як правило, модульні тести - це окремі проєкти (тут MSTest)
для доступу до об'єктів між проєктами утворюють зв'язки (залежності)
Сама система тестування полягає у складанні тверджень (Asserts),
перевірка яких відбувається. Якщо хоча б одне твердження порушується, то тест
вважається проваленим (Fail). Тест пройдений (Passed) якщо всі твердження
перевірені успішно.

Модульні тести дають числову характеристику для оцінки якості - "покриття"
покриття коду тестами (coverage) - відсоток вихідного коду, який бере участь
(виконується) у складі тестів.
- за рядками коду (застарілий підхід)
- за інструкціями
- в ООП за класами та методами
- за "шляхами" - за кількістю покритих блоків if/else
...

Д.З. Скласти тести для методу класу StringHelper::UrlCombine(part1, part2)
у вигляді окремого тестового методу UrlCombineTest
Виразити у якості тверджень (Assert) наступні умови:
UrlCombine("/home/", "/index/") -> /home/index
UrlCombine("home", "index") -> /home/index
а також додати інші твердження.

----------------------- TDD / BDD ------------------------------------
Test Driven Development / Behavior Driven Development
Стиль проєктування за якого тести передують створенню проєкту (коду).
TDD - складаються тести мовою програмування як у проєкті
BDD - з використанням уніфікованої мови тестів

Принцип, позичений з ХР (екстремального програмування) - проєкт
слід робити у максимально простий (короткий) спосіб, який призводить
до проходження усіх тестів.

-------------------- Тестування виняткових ситуацій -------------------
Про що мова - про реагування коду (алгоритмів) на неправильні або
сумнівні дані
Виключення та помилки:
- помилка повертається методом як ознака неправильної роботи
- виключення викидається кодом і обробляється в окремих блоках

Наприклад String.IndexOf(char) - якщо "char" немає у рядку -- 
 виключення або помилка?
 помилка-повернення значення "-1", яке не може бути позицією

Відкрити файл, якого немає (чи заблокований) -> FileNotFoundException
 чому виняток? тому що роботу конструктора по іншому неможна перервати

Коли вживати помилки, коли винятки?
- помилки застосовують там, де їх поява очікувана (пошук відсутнього
   елемента)
- винятки - там, де продовження роботи з наявними даними неможливе

Особливість системи модульного тестування полягає у тому, що Assert
також працює на виключеннях. Тобто поява виключення у нашому коді
буде сприйматись як провал тесту. Це вимагає особливих підходів до
тестувань ситуацій, у який повинні бути винятки.
= замість блоків try-catch краще вжити Assert.ThrowsException
   з метою строгої перевірки типу виключення (принцип узагальнення
   у ньому не діє - FileNotFoundException не зарахується як Exception)
= при передачі виняткового коду в метод слід "обгорнути" його у 
   відкладену форму - лямбду або Action, це перенесе виконання коду
   до Assert.ThrowsException замість провалу тесту
= для контролю параметрів винятку (повідомлення, джерела, тощо) 
   він (виняток) повертається з методу Assert.ThrowsException.
   Додаткові перевірки здійснюються окремими Assert-ами
